# Generated by Django 3.2.9 on 2022-12-17 16:06

import os
import json
from django.conf import settings
from django.db import migrations
from django.utils import timezone


def load_json(filename: str, basepath: str = 'tagger/fixtures/'):
    filepath = os.path.join(basepath, filename)
    with open(filepath, 'r') as f:
        data = json.load(f)
    return data


def populate_initial_data(apps, schema_editor):
    # Get models
    User = apps.get_model(settings.AUTH_USER_MODEL)
    Category = apps.get_model('tagger', 'Category')
    Code = apps.get_model('tagger', 'Code')
    Period = apps.get_model('tagger', 'Period')
    Mapping = apps.get_model('tagger', 'Mapping')

    # Get superuser
    superuser = User.objects.get(username = os.environ.get('DJANGO_SUPERUSER_USERNAME', 'superuser'))

    # Create categories
    categories = load_json('categories.json')
    categories = [
        Category(description = desc, created_by = superuser, modified_by = superuser) for desc in categories
    ]
    Category.objects.bulk_create(categories)

    # Create codes
    codes = load_json('codes.json')
    codes = [
        Code(**code, created_by = superuser, modified_by = superuser) for code in codes
    ]
    Code.objects.bulk_create(codes)

    # Create periods
    periods = load_json('periods.json')
    periods= [
        Period(**period, created_by = superuser, modified_by = superuser) for period in periods
    ]
    Period.objects.bulk_create(periods)

    # Create mappings
    mappings = load_json('mappings.json')
    mapping_objs = []
    now = timezone.now()

    for mapping in mappings:
        mapping.update({'is_option': bool(mapping['is_option'])})
        mapping = Mapping(**mapping, is_approved = True, approved_by = superuser, approved_on = now, created_by = superuser, modified_by = superuser)

        if mapping.is_option:
            mapping.optioned_by = superuser
            mapping.optioned_on = now

        mapping_objs.append(mapping)
        
    Mapping.objects.bulk_create(mapping_objs)


class Migration(migrations.Migration):

    dependencies = [
        ('tagger', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_initial_data, reverse_code = migrations.RunPython.noop),
    ]
